length(y)
x+y
ls()
rm(x,y)
ls()
rm(list = ls())
ls()
x = matrix(data = C(1,2,3,4), nrow = 2, ncol = 2)
x = matrix(data = c(1,2,3,4), nrow = 2, ncol = 2)
x
rm(x)
x
x=matrix(c(1,2,3,4),2,2)
x
?matrix
matrix(c(1,2,3,4),2,2,byrow = TRUE)
sqrt(x)
x^2
x=rnorm(50)
x
y=x+rnorm(50,mean = 50,sd=.1)
y
cor(x,y)
set.seed(1303)
rnorm(50)
rnorm(50)
set.seed(3)
y=rnorm(100)
mean(y)
var(y)
sqrt(var(y))
sd(y)
x=rnorm(100)
y=rnorm(100)
plot(x,y)
plot(x,y,xlab = "this is the x-axis",ylab = "this is the y-axis",main = "Plot of X vs Y")
pdf("Figure.pdf")
plot(x,y,col="green")
plot(x,y,col="green")
dev.off()
x=seq(1,10)
x
x=1:10
x
x=seq(-pi,pi,length=50)
A=matrix(1:16,4,4)
A
A[2,3]
A[c(1,3),c(2,4)]
A[1:3,2:4]
A[1:2,]
A[,1:2]
A[1,]
A[-c(1,3),]
A[-c(1,3),-c(1,3,4)]
dim(A)
Auto=read.table("Auto.data")
install.packages(ISLR)
install(ISLR)
fix(Auto)
q()
library(UCM)
install.packages("ISLR")
names(Auto)
library("Auto")
names("Auto")
library(Auto)
library(MASS)
names(MASS)
names("MASS")
names(Boston)
install.packages("Auto")
library(Boston)
library(MASS)
summary(Boston)
names(Boston)
names(Auto)
library(ISLR)
names(Auto)
?pairs
names(Auto)
pairs(Auto)
library(ISLR)
summary(Auto)
names(Auto)
pairs(Auto)
?lm()
cor(Auto)
cor("Auto"-"name")
?cor()
cor(Auto[,-9])
lm.fit()
?lm.fit
lm.fit=lm(mpg~cylinders+displacement+horsepower+weight+acceleration+year+origin, data = Auto)
summary(lm.fit)
plot(lm.fit)
?par
par(mfrow=c(2,2))
plot(lm.fit)
lm.fit=lm(mpg~cylinders*displacement+horsepower+weight+acceleration+year+origin, data = Auto)
summary(lm.fit)
summary(lm.fit)
lm.fit=lm(mpg~cylinders*displacement+horsepower+weight+acceleration+year+origin, data = Auto)
summary(lm.fit)
lm.fit=lm(mpg~cylinders+displacement*horsepower+weight+acceleration+year+origin, data = Auto)
summary(lm.fit)
lm.fit=lm(mpg~cylinders+displacement+horsepower*weight+acceleration+year+origin, data = Auto)
summary(lm.fit)
lm.fit=lm(mpg~cylinders+displacement+horsepower+weight*acceleration+year+origin, data = Auto)
summary(lm.fit)
lm.fit=lm(mpg~cylinders+displacement+horsepower+weight+acceleration*year+origin, data = Auto)
summary(lm.fit)
lm.fit=lm(mpg~cylinders+displacement+horsepower+weight+acceleration+year*origin, data = Auto)
summary(lm.fit)
lm.fit=lm(mpg~cylinders+displacement+horsepower*acceleration+weight+year*origin, data = Auto)
summary(lm.fit)
lm.fit=lm(mpg~cylinders*displacement*horsepower*acceleration+weight+year+origin, data = Auto)
summary(lm.fit)
lm.fit=lm(mpg~cylinders*displacement*horsepower*acceleration*weight*year*origin, data = Auto)
summary(lm.fit)
lm.fit=lm(mpg~cylinders*displacement*horsepower*acceleration*weight+year+origin, data = Auto)
summary(lm.fit)
lm.fit=lm(mpg~cylinders+I(cylinder^2)+displacement+horsepower+weight+acceleration+year+origin, data = Auto)
lm.fit=lm(mpg~cylinders+I(cylinders^2)+displacement+horsepower+weight+acceleration+year+origin, data = Auto)
summary(lm.fit)
lm.fit=lm(mpg~cylinders+I(cylinders^2)+I(cylinders^0.5)+displacement+horsepower+weight+acceleration+year+origin, data = Auto)
lm.fit=lm(mpg~cylinders+I(cylinders^2)+I(cylinders^0.5)+I(log(cylinders))+displacement+horsepower+weight+acceleration+year+origin, data = Auto)
summary(lm.fit)
summary(lm.fit)
lm.fit=lm(mpg~cylinders+I(cylinders^2)+I(cylinders^0.5)+I(log(cylinders))+displacement+I(displacement^2)+I(displacement^0.5)+I(log(displacement))+horsepower+I(horsepower^2)+I(horsepower^0.5)+I(log(horsepower))+weight+I(weight^2)+I(weight^0.5)+I(log(weight))+acceleration+I(acceleration^2)+I(acceleration^0.5)+I(log(acceleration))+year+I(year^2)+I(year^0.5)+I(log(year))+origin+I(origin^2)+I(origin^0.5)+I(log(origin)), data = Auto)
summary(lm.fit)
lm.fit=lm(mpg~cylinders+I(cylinders^2)+I(cylinders^0.5)+I(log(cylinders))+displacement+I(displacement^2)+I(displacement^0.5)+I(log(displacement))+horsepower+I(horsepower^2)+I(horsepower^0.5)+I(log(horsepower))+weight+I(weight^2)+I(weight^0.5)+I(log(weight))+acceleration+I(acceleration^2)+I(acceleration^0.5)+I(log(acceleration))+year+I(year^2)+I(year^0.5)+I(log(year))+origin+I(origin^2)+I(origin^0.5)+I(log(origin)), data = Auto)
summary(lm.fit)
library(MASS)
library(ISLR)
x=c(1,3,5,2)
x
x=c(1,6,2)
x
length(x)
y=c(1,4,3)
y
length(y)
x+y
ls
ls()
rm(x,y)
ls()
rm(list = ls())
?matrix
x=matrix(data = c(1,2,3,4))
x
x=matrix(data = c(1,2,3,4),nrow = 2)
x
x=matrix(data = c(1,2,3,4),nrow = 2, ncol = 2)
x
rm(x)
x=matrix(c(1,2,3,4),2,2)
x
matrix(c(1,2,3,4),2,2, byrow = TRUE)
x
sqrt(x)
x^2
x=rnorm(50)
x
x
y=x+rnorm(50, mean=50, sd=.1)
y
cor(x,y)
set.seed(1303)
rnorm()
rnorm(50)
set.seed(3)
y=rnorm(100)
mean(y)
var(y)
sqrt(var(y))
sd(y)
plot(x,y)
x=rnorm(100)
y=rnorm(100)
plot(x,y)
plot(x,y,xlab = "this is the x-axis", ylab = "this is the y-axis", main = "Plot of X vs Y")
pdf("Hi.pdf")
plot(x,y, col="green")
plot(x,y,xlab = "this is the x-axis", ylab = "this is the y-axis", main = "Plot of X vs Y", col="green")
dev.off()
seq(1,10)
seq(0,1,length=10)
x=seq(3,11)
x
x=1:10
x
x=seq(-pi,pi,length=50)
x
A=matrix(1:10,4,4)
A=matrix(1:16,4,4)
a
A
A[2,3]
A[c(1,3),c(2,4)]
A[1:3,2:4]
A[,1:2]
A[-c(1,3),]
dim(A)
Auto=read.table("Auto.data")
import("ISLR")
library("ISLR")
Auto=read.table("Auto.data")
library()
library(MASS)
library(ISLR)
fix(Auto)
Auto=read.table("Auto.data")
fix(Auto)
names(Auto)
names(library("ISLR"))
names(library("MASS"))
read.table(Auto)
read.table("Auto")
read.table("Auto.csv")
dim(Auto)
na.omit(Auto)
dim(Auto)
names(Auto)
plot(cylinders, mpg)
plot(Auto$cylinders, Auto$mpg)
plot(Auto$cylinders, Auto$mpg)
attach(Auto)
plot(cylinders, mpg)
plot(x,y)
plot(mpg, cylinders)
cylinders=as.factor(cylinders)
plot(cylinders, mpg)
plot(cylinders, mpg)
x=y
plot(x,y)
plot(horsepower, mpg)
identify(horsepower,mpg,name)
summary(Auto)
summary(mpg)
q()
fix(Boston)
View(Boston)
library("ISLR")
names("ISLR")
names(ISLR)
summary(ISLR)
summary("ISLR")
fix(Boston())
fix(Boston)
library(MASS)
fix(Boston())
fix(Boston)
library("MASS")
fix(Boston)
library(MASS)
fix(Boston)
names(Boston)
lm.fit=lm(medv~lstat)
lm.fit=lm(medv~lstat, data = Boston)
attach(Boston)
lm.fit=lm(medv~lstat)
lm.fit
summary(lm.fit)
names(lm.fit)
coef(lm.fit)
confint(lm.fit)
Boston
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
install.packages("rafalib")
source('C:/Workstation/UCM/R/UCM/R/learnR.R')
install.packages("rafalib")
source('C:/Workstation/UCM/R/UCM/R/learnR.R')
2+2
library(swirl)
swirl()
5+7
x<- 5+7
x
y<- x-3
y
z<- c(1.1, 9, 3.14)
?c
z
C(z, 555, z)
z
c(z, 555, z)
z*2 + 100
my_sqrt = sqrt(z-1)
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
w <- c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2 + 1000
my_div
q()
x=matrix(rnorm(200*2), ncol = 2)
x[1:100,]=x[1:100,]+2
x[101:150,]=x[101:150,]-2
y=c(rep(1, 150), rep(2, 50))
x
y
dat=data.frame(x=x, y=as.factor(y))
plot(x, col=y)
train=sample(200,100)
svmfit=svm(y~., data=dat[train,], kernel="radial", gamma=1, cost=1)
library(e1071)
svmfit=svm(y~., data=dat[train,], kernel="radial", gamma=1, cost=1)
plot(svmfit, dat[train,])
plot(svmfit, dat[train,])
summary(svmfit)
svmfit=svm(y~., data=dat[train,], kernel="radial", gamma=1, cost=1e5)
plot(svmfit, dat[train,])
set.seed(1)
tune.out=tune(svm, y~., data=dat[train,], kernel="radial", ranges = list(cost=c(0.1, 1, 10, 100, 1000), gamma=c(0.5, 1, 2, 3, 4)))
summary(tune.out)
table(true=dat[-train, "y"], pred=predict(tune.out$best.model, newx=dat[-train,]))
x1=runif(500)-0.5
x1
x2=runif(500)-0.5
y=1*(x1^2-x2^2 > 0)
y
plot(x1, x2, col(y))
plot(x1, x2, col=y)
plot(x1, x2)
plot(x1)
plot(x1, x2)
plot(x1, x2, col=y)
plot(x1, x2, col=y)
plot(x1, x2, col=y-1)
plot(x1, x2, col)
plot(x1, x2, col=(y=0, y=1))
plot(x1, x2, col=(y=0, y=1))
?plot
plot(x1, x2, col=y)
plot(x1, x2, col=(y-1))
plot(x1, x2, col=(y+1))
plot(x1, x2, col=(y+4))
plot(x1, x2, col=(y+1))
glm.fit=glm(y~x1+x2, family = binomial)
y
glm.fit
plot(glm.fit)
summary(glm.fit)
coef(glm.fit)
glm.pred=predict(glm.fit, type = "response")
glm.pred
plot(glm.pred)
plot(glm.pred, col=y)
plot(glm.pred, col=(y+1))
plot(glm.pred, col=glm.pred)
plot(glm.pred, col=(glm.pred))
plot(glm.pred, col=)
contrasts(y)
contrasts(glm.pred)
plot(glm.pred)
plot(glm.pred, col=(y+1))
plot(glm.pred, col=(glm.pred+1))
plot(glm.pred, col=(glm.pred-1))
plot(glm.pred, col=(glm.pred+2))
plot(glm.pred, col=(glm.pred+0.5))
plot(glm.pred, col=(glm.pred+5))
set.seed(1)
rnorm(20)
enorm(20)
rnorm(20)
rnorm(20)
set.seed(1)
rnorm(20)
hist(rnorm(100))
hist(rnorm(100, mean = 10, sd=0.1))
hist(runif(100))
x=matrix(rnorm(20*2), ncol = 2)
x
plot(x)
y=c(rep(-1,10), rep(1,10))
y
y==1
x[1,]
library(ISLR)
library(ISLR)
nci.labs=NCI60$labs
nci.data=NCI60$data
dim(nci.data)
nci.labs[1:4]
table(nci.labs)
pr.out=prcomp(nci.data, scale=TRUE)
plot(pr.out)
Cols=function(vec){
cols=rainbow(length(unique(vec)))
return(cols[as.numeric(as.factor(vec))])
}
par(mfrow=c(1,2))
plot(pr.out$x[1,2], col=Cols(nci.labs), pch=19, xlab ="Z1", ylab = "Z2")
plot(pr.out$x[1,2], col=Cols(nci.labs), pch=19, xlab ="Z1", ylab = "Z2")
plot(pr.out$x[,1:2], col=Cols(nci.labs), pch=19, xlab ="Z1", ylab = "Z2")
plot(pr.out$x[,1:2], col=Cols(nci.labs), pch=19, xlab ="Z1", ylab = "Z2")
plot(pr.out$x[,c(1:3)], col=Cols(nci.labs), pch=19, xlab ="Z1", ylab = "Z3")
plot(pr.out$x[,1:2], col=Cols(nci.labs), pch=19, xlab ="Z1", ylab = "Z2")
plot(pr.out$x[,c(1:3)], col=Cols(nci.labs), pch=19, xlab ="Z1", ylab = "Z3")
plot(pr.out$x[,1:2], col=Cols(nci.labs), pch=19, xlab ="Z1", ylab = "Z2")
pve =100* pr.out$sdev ^2/ sum(pr.out$sdev ^2)
pve =100*pr.out$sdev^2/sum(pr.out$sdev^2)
par(mfrow=c(1,2))
plot(pve, type ="o", ylab="PVE", xlab="Principal Component", col="blue")
plot(pve, type ="o", ylab="PVE", xlab="Principal Component", col="blue")
plot(cumsum(pve), type="o", ylab="Cumulative PVE", xlab="Principal Component ", col="brown3")
plot(cumsum(pve), type="o", ylab="Cumulative PVE", xlab="Principal Component ", col="brown3")
sd.data=scale(nci.data)
sd.data=scale(nci.data)
par(mfrow=c(1,3))
data.dist=dist(sd.data)
plot(hclust(data.dist), labels = nci.labs, main = "Complete Linkage", xlab = "", sub = "", ylab = "")
plot(hclust(data.dist, method="average"), labels=nci.labs, main="Average Linkage", xlab="", sub="", ylab="")
plot(hclust(data.dist, method="single"), labels=nci.labs, main="Single Linkage", xlab="", sub="", ylab="")
hc.out=hclust(dist(sd.data))
hc.out=hclust(dist(sd.data))
hc.clusters=cutree(hc.out,4)
table(hc.clusters, nci.labs)
par(mfrow=c(1,1))
par(mfrow=c(1,1))
plot(hc.out, labels = nci.labs)
abline(h=139, col="red")
hc.out
set.seed(2)
km.out=kmeans(sd.data, 4, nstart = 20)
km.clusters=km.out$cluster
table(km.clusters, hc.clusters)
clr
?nci
??nci
set.seed(1)
x1=runif(500)-0.5
set.seed(2)
x2=runif(500)-0.5
y=1*(x1^2-x2^2 > 0)
plot(x1, x2, col=(y+1))
glm.fit=glm(y~x1+x2, family = binomial)
plot(glm.fit)
plot(glm.fit)
glm.pred=predict(glm.fit, type = "response")
glm.pred
glm.pred[1:10]
contrasts(Direction)
plot(glm.pred, col=(glm.pred+5))
plot(glm.pred)
contrasts(Direction)
glm.prob=predict(glm.fit, type = "response")
rm(glm.pred)
glm.prob[1:10]
glm.pred=rep("Down",500)
glm.pred[glm.prob>0.5]="up"
glm.pred[1:10]
table(glm.pred)
table(glm.pred, Direction)
table(glm.pred)
plot(glm.pred)
plot(glm.prob)
plot(glm.prob, y)
plot(glm.prob, y, col=y+1)
glm.fit=glm(y~x1+x2+x1^2, family = binomial)
glm.prob=predict(glm.fit, type = "response")
plot(glm.prob, y, col=y+1)
plot(glm.prob, y, col=y+1)
table(glm.prob)
set.seed(1)
x1 = runif(500) - 0.5
x2 = runif(500) - 0.5
y = 1*(x1^2 - x2^2 > 0)
x1
x2
y
plot(x1)
plot(x2)
plot(y)
plot( x1, x2, col=(y+1), pch=1, xlab='x1', ylab='x2', main='initial data' )
glm.fit = glm(y ~ x1 + x2, family = binomial)
summary(glm.fit)
dat = data.frame(x1=x1, x2=x2, y=as.factor(y))
glm.prob = predict(glm.fit, dat, type = "response")
y_pred = 1*(glm.prob>0.5)
plot(x1, x2, col=y_pred+1, pch=1, xlab = "x1", ylab = "x2", main = "logistic regression")
glm.fit2 = glm(y ~ x1 + x2 + I(x1^2) + I(X2^2) + I(x1*x2), data = dat, family = binomial)
glm.fit2 = glm(y ~ x1 + x2 + I(x1^2) + I(x2^2) + I(x1*x2), data = dat, family = binomial)
glm.fit2 = glm(y ~ x1 + x2 + I(x1^2) + I(x2^2) + I(x1*x2), data = dat, family = binomial)
glm.fit2 = glm(y ~ x1 + x2 + I(x1^2) + I(x2^2) + I(x1*x2), family = binomial)
glm.fit2 = glm(y ~ x1 + x2 + I(x1^2) + I(x2^2) + I(x1*x2), data = dat, family = binomial)
data_wo_cls = data.frame(x1=x1, x2=x2)
glm.prob2 = predict(glm.fit2, data_wo_cls, type = "response")
y_pred2 = 1*(glm.prob2>0.5)
plot(x1, x2, col=y_pred2+1, pch=1, xlab = "x1", ylab = "x2", main = "logistic regression with non-linear function")
svc.fit = svm(y ~ x1 + x2, data=dat, kernel="linear", cost = 0.1)
library(e1071)
svc.fit = svm(y ~ x1 + x2, data=dat, kernel="linear", cost = 0.1)
svc.pred = predict(svc.fit, data_wo_cls)
svc.pred
plot(x1, x2, col=svc.pred+1, pch=1, xlab = "x1", ylab = "x2", main = "supoort vector classifier, kernel=linear")
plot(x1, x2, col=svc.pred+2, pch=1, xlab = "x1", ylab = "x2", main = "supoort vector classifier, kernel=linear")
plot(x1, x2, col=svc.pred, pch=1, xlab = "x1", ylab = "x2", main = "supoort vector classifier, kernel=linear")
svm.fit = svm(y ~ x1 + x2, data=dat,kernel="radial", gamma=1, cost = 0.1)
svm.pred = predict(svm.fit, data_wo_cls)
plot(x1, x2, col=svm.pred+1, pch=1, xlab = "x1", ylab = "x2", main = "supoort vector machine, kernel=radial")
plot(x1, x2, col=svm.pred, pch=1, xlab = "x1", ylab = "x2", main = "supoort vector machine, kernel=radial")
ls()
function()
